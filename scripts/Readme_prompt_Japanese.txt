# README生成依頼

## 役割
あなたは経験豊富なテクニカルライター兼開発者です。提示された情報に基づき、ソフトウェアプロジェクトの高品質なREADME.mdファイルを生成する役割を担います。

## 目標
以下の情報に基づいて、**エンドユーザー**と**開発者**の両方にとって非常に分かりやすく、プロジェクトの理解、利用、貢献、そして潜在的な問題点の把握を促進するREADME.mdファイルをMarkdown形式で生成してください。

## 提供情報

1.  **プロジェクト名:**
    `[ここにプロジェクト名を記入]`

2.  **プロジェクト概要:** (何をするためのプロジェクトか、主な目的、解決する課題などを具体的に)
    `[ここにプロジェクトの少し詳細な説明を記入]`

3.  **主なターゲットユーザー:** (任意: 想定されるユーザー像や前提知識を具体的に)
    `[例: Pythonでのデータ処理経験があるデータサイエンティスト、Reactを用いたフロントエンド開発経験者など]`

4.  **フォルダ構造:** ( `tree` コマンドの出力結果や、手動で記述したツリー構造)
    ```
    [ここにフォルダ構造を貼り付け または 記述]
    ```

5.  **主要なフォルダ/ファイルの役割説明:** (上記のフォルダ構造に対応する形で、各要素が何を担当しているか。なぜその構造になっているかの意図もあれば追記)
    *   `[フォルダ名/ファイル名1]`: `[その役割や内容の説明。設計意図など]`
    *   `[フォルダ名/ファイル名2]`: `[その役割や内容の説明]`
    *   ... (プロジェクト理解に重要なもの)

6.  **主要なコード抜粋 (任意):** (READMEの記述をより具体的にするために、プロジェクトの中心となるロジック、設定、APIエンドポイントなどのコードの一部を提供してください。**機密情報は必ず削除またはマスキングしてください。**)
    *   **ファイルパス:** `[例: src/core/processor.py]`
        ```python
        # [ここに processor.py の主要なクラスや関数のコードを貼り付け]
        # 例: データ処理の中核を担う部分
        class DataProcessor:
            def __init__(self, config):
                # ...
            def run(self, data):
                # ...
        ```
    *   **ファイルパス:** `[例: routes/api.js]`
        ```javascript
        // [ここに主要なAPIエンドポイント定義のコードを貼り付け]
        // 例: ユーザー情報取得API
        router.get('/users/:id', async (req, res) => {
          // ...
        });
        ```
    *   **ファイルパス:** `[例: config/default.yaml]`
        ```yaml
        # [ここに主要な設定項目の例を貼り付け]
        api_key: YOUR_API_KEY_HERE # 必ず削除/マスキング
        database:
          host: localhost
          port: 5432
        ```
    *   ... (必要に応じて追加)

7.  **主要な機能:** (このソフトウェアで何ができるか、ユーザー視点で具体的に箇条書き)
    *   `[機能1: 具体的な操作や結果]`
    *   `[機能2: 具体的な操作や結果]`
    *   ...

8.  **技術スタック:** (使用している主要言語、フレームワーク、ライブラリ、データベース、インフラなど、バージョン情報もあれば)
    *   `[言語: 例: Python 3.10+, Node.js 18.x]`
    *   `[フレームワーク: 例: FastAPI 0.9x, Next.js 13]`
    *   `[ライブラリ: 例: Pandas, SQLAlchemy, Zustand]`
    *   `[データベース: 例: PostgreSQL 15, Redis]`
    *   `[インフラ: 例: Docker, AWS (S3, EC2)]`
    *   ...

9.  **インストール/セットアップ方法:** (ユーザーが環境を構築し、使い始められるまでの具体的な手順。前提条件も明記)
    *   `前提条件: [例: Docker Desktop, Python 3.10以上, Node.js 18以上]`
    *   `手順1: リポジトリのクローン`
        ```bash
        git clone [リポジトリURL]
        cd [プロジェクト名]
        ```
    *   `手順2: 依存関係のインストール`
        ```bash
        # 例: Pythonの場合
        python -m venv venv
        source venv/bin/activate  # Windows: venv\Scripts\activate
        pip install -r requirements.txt
        # 例: Node.jsの場合
        npm install
        ```
    *   `手順3: 環境変数の設定`
        `[例: .env.example をコピーして .env を作成し、必要な値を設定してください。]`
    *   `手順4: データベースのマイグレーション (もしあれば)`
        ```bash
        # 例: Alembicの場合
        alembic upgrade head
        ```
    *   ...

10. **基本的な使い方:** (ソフトウェアを実行する具体的なコマンド例、設定方法、簡単なチュートリアル、APIエンドポイントの例など)
    *   `実行方法:`
        ```bash
        # 例: Pythonスクリプト実行
        python src/main.py --input data.csv --output results.json
        # 例: Webサーバー起動
        uvicorn src.app:app --reload
        # 例: npmスクリプト実行
        npm run dev
        ```
    *   `設定例:`
        `[例: config.yaml の `threshold` 値を変更することで、処理の閾値を調整できます。]`
    *   `APIエンドポイント例 (もしあれば):`
        `[例: `GET /api/items` でアイテム一覧を取得できます。]`
        `[例: `POST /api/items` に以下のJSONボディでアイテムを作成できます: ...]`

11. **デプロイ情報 (任意):** (アプリケーションの本番環境へのデプロイ方法や考慮事項。Dockerイメージのビルド方法、サーバー設定例など)
    *   `Dockerでのデプロイ:`
        ```bash
        # イメージビルド
        docker build -t [イメージ名] .
        # コンテナ実行
        docker run -d -p 8000:8000 --env-file .env [イメージ名]
        ```
    *   `サーバー要件:`
        `[例: Nginx, Gunicorn/PM2, Supervisor などが必要]`
    *   `PaaSへのデプロイ:`
        `[例: Heroku, Vercel, AWS Elastic Beanstalk へのデプロイ手順やリンク]`
    *   `注意事項:`
        `[例: 本番環境では DEBUG=False に設定してください。]`

12. **開発者向け情報:** (開発への貢献を考えている人向けの情報)
    *   `開発環境セットアップ:`
        `[例: `pip install -r requirements-dev.txt` で開発用依存関係をインストールしてください。]`
        `[例: pre-commitフックの設定方法: `pre-commit install`]`
    *   `テストの実行:`
        ```bash
        # 例: pytest
        pytest tests/
        # 例: npm test
        npm test
        ```
    *   `コードフォーマット/リンティング:`
        ```bash
        # 例: Black, Flake8, Prettier
        black .
        flake8 .
        npm run lint
        ```
    *   `ブランチ戦略:`
        `[例: mainブランチは保護されています。開発はdevelopブランチからフィーチャーブランチを作成してください。]`
    *   `コーディング規約:`
        `[例: PEP 8準拠、xxxスタイルガイドを参照]`
    *   `データベースマイグレーション作成 (もしあれば):`
        ```bash
        # 例: Alembic
        alembic revision --autogenerate -m "Add new table"
        ```

13. **コントリビューション:** (任意: バグ報告、機能要望、プルリクエストの具体的な手順)
    *   `Issueテンプレート:` `[バグ報告や機能要望はGitHub Issuesのテンプレートに従ってください。]`
    *   `プルリクエスト:` `[変更内容に対応するIssueがあることを確認してください。テストが通っていることを確認してください。]`

14. **既知の問題/制限事項 (任意):** (現時点で認識されている問題、パフォーマンス上のボトルネック、未実装の機能など)
    *   `[例: 大規模なデータセット(1GB以上)を処理するとメモリ使用量が多くなる可能性があります。]`
    *   `[例: Windows環境での一部機能の動作は未検証です。]`
    *   `[例: 認証機能は現在開発中です。]`

15. **ライセンス:** (任意: プロジェクトのライセンス)
    `[例: このプロジェクトはMITライセンスの下で公開されています。詳細は LICENSE ファイルを参照してください。]`

16. **その他:** (任意: 連絡先、参考資料、謝辞、スクリーンショットやデモへのリンクなど)
    *   `連絡先:` `[問題があればGitHub Issuesへ]`
    *   `参考資料:` `[関連するドキュメントや論文へのリンク]`
    *   `謝辞:` `[貢献者や利用ライブラリへの感謝]`
    *   **(推奨)** `スクリーンショット/デモ:` `[もしあれば、ここにスクリーンショット画像へのリンクやデモサイトへのリンクを記載]`
    *   **(推奨)** `バッジ:` `[CI/CDステータス、カバレッジ、ライセンス等のバッジをここに追加することを推奨]`

## 出力要件

*   **形式:** Markdown形式 (`README.md`)
*   **構成:** 上記「提供情報」の項目を網羅し、論理的で分かりやすい構成にしてください。必ずしも提供情報の順番通りである必要はありません。読みやすさを最優先してください。
*   **言語:** 日本語
*   **トーン:**
    *   ユーザー向けセクション: 明確、簡潔、丁寧、親切。専門用語は必要に応じて簡単な説明を加える。
    *   開発者向けセクション: 技術的に正確、簡潔。
*   **可読性:** 箇条書き、コードブロック（言語指定を推奨）、強調、セクション区切りなどを適切に用い、非常に読みやすいドキュメントにしてください。
*   **網羅性と具体性:** 提供された情報を可能な限り反映し、特に「主要なコード抜粋」を参考に「基本的な使い方」や「開発者向け情報」の具体例を充実させてください。冗長にならないよう注意し、情報の取捨選択も行ってください。
*   **出力形式:** **生成されるREADMEの内容全体を、以下のように単一のMarkdownコードブロック内に記述してください。これにより、チャットインターフェースでレンダリングされずに、Markdownソースコードとしてそのままコピーできます。**
    ```markdown
    (ここに生成されたREADME.mdの内容全体を記述してください)
    ```

---

それでは、上記情報に基づいて最高のREADME.mdを生成してください。
